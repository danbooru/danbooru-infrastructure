# Define a Danbooru instance running on danbooru.donmai.us.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: danbooru
  namespace: danbooru
  labels:
    app: danbooru
spec:
  replicas: 6
  selector:
    matchLabels:
      app: danbooru

  strategy:
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 100%

  template:
    metadata:
      labels:
        app: danbooru
    spec:
      # Set the hostname to a fixed value to avoid problems with New Relic
      # thinking we have hundreds of unique instances because our hostname
      # changes after every deploy.
      #
      # https://docs.newrelic.com/docs/agents/ruby-agent/configuration/ruby-agent-configuration/#process_host-display_name
      # https://discuss.newrelic.com/t/relic-solution-hostname-explosions/58911
      # https://newrelic.zendesk.com/hc/en-us/articles/360058414314-Ruby-Hostname-Explosion
      hostname: danbooru

      containers:
      - name: danbooru
        image: ghcr.io/danbooru/danbooru:latest
        imagePullPolicy: Always

        ports:
        - containerPort: 3000

        envFrom:
        - configMapRef:
            name: danbooru-config-env
        - secretRef:
            name: danbooru-secret-env

        volumeMounts:
        - name: danbooru-local-config
          mountPath: "/etc/danbooru"
          readOnly: true

        # http://127.0.0.1:9293/stats is the Puma control endpoint. Note that this
        # endpoint will still respond even if Rails is unresponsive due to
        # being backlogged with slow requests.
        #
        # We use curl instead of httpGet because this endpoint is only listening
        # on localhost so the kubelet can't connect to it from outside.
        #
        # https://github.com/harmjanblok/puma-metrics
        readinessProbe:
          exec:
            command: ["curl", "http://127.0.0.1:9293/stats"]
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 6
          initialDelaySeconds: 5

        # Delay shutdown for 15 seconds when the pod is stopped to give it time
        # to finish servicing any incoming requests.
        #
        # https://github.com/puma/puma/issues/2343#issuecomment-704386789
        # https://blog.gruntwork.io/delaying-shutdown-to-wait-for-pod-deletion-propagation-445f779a8304
        # https://philpearl.github.io/post/k8s_ingress/
        # https://kubernetes.io/docs/tasks/configure-pod-container/attach-handler-lifecycle-event/
        # https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-terminating-with-grace
        lifecycle:
          preStop: { exec: { command: ["sleep", "15"] }}

      # See config/danbooru/nginx.conf for the nginx config.
      - name: openresty
        image: ghcr.io/danbooru/danbooru:latest
        imagePullPolicy: Always
        command: ["openresty"]
        args: ["-e", "/dev/stderr"]
        ports:
        - containerPort: 8080

        # Mount config/danbooru/nginx.conf at /usr/local/nginx/conf/nginx.conf
        volumeMounts:
        - name: danbooru-nginx-config
          mountPath: "/usr/local/nginx/conf"
          readOnly: true

        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName

        - name: K8S_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name

        readinessProbe:
          httpGet:
            path: /nginx/status
            port: 8080
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 6
          initialDelaySeconds: 5

        lifecycle:
          preStop: { exec: { command: ["sleep", "15"] }}

      volumes:
      - name: danbooru-local-config
        secret:
          secretName: danbooru-local-config
      - name: danbooru-nginx-config
        configMap:
          name: danbooru-nginx-config

      # Try to run one instance per node. Avoid multiple instances on the same node
      # https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: danbooru

      # Only run on the app servers.
      # https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - { key: kubernetes.io/hostname, operator: In, values: [gura, ame, ina] }

---

apiVersion: v1
kind: Service
metadata:
  name: danbooru
  namespace: danbooru
spec:
  selector:
    app: danbooru
  ports:
    - port: 80
      targetPort: 8080

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: danbooru
  namespace: danbooru
  annotations:
    nginx.ingress.kubernetes.io/limit-rps: 10
    nginx.ingress.kubernetes.io/limit-burst-multiplier: 5
spec:
  rules:
    - host: danbooru.donmai.us
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: danbooru
                port:
                  number: 80

    - host: safebooru.donmai.us
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: danbooru
                port:
                  number: 80

    - host: shima.donmai.us
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: danbooru
                port:
                  number: 80

    - host: saitou.donmai.us
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: danbooru
                port:
                  number: 80

    - host: kagamihara.donmai.us
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: danbooru
                port:
                  number: 80

    - host: danbooru-k8s.donmai.us
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: danbooru
                port:
                  number: 80
  tls:
    - hosts:
      - danbooru.donmai.us
      - danbooru-k8s.donmai.us
      secretName: donmai-us-tls
